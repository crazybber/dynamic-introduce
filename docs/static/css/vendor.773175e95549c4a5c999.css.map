{"version":3,"sources":["webpack:///src/Mobile.vue","webpack:///src/components/StyleEditor.vue","webpack:///src/components/ResumeEditor.vue","webpack:///reset.css"],"names":[],"mappings":";AAoXA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA;AACA;EACA;AACA;;ACjWA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;;ACPA;AACA;AACA;AACA;AACA;EACA;AACA;AAEA;AACA;IACA;AACA;AACA;IACA;AACA;AACA;AC9CA,EAAE,SAAS,EAAE,UAAU,CAAC;AACxB,EAAE,sBAAsB,CAAC;AACzB,UAAU,sBAAsB,CAAC;AACjC,SAAS,sBAAsB,CAAC","file":"static/css/vendor.773175e95549c4a5c999.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <StyleEditor ref=\"styleEditor\" :code=\"currentStyle\"></StyleEditor>\n    <ResumeEditor ref=\"resumeEditor\" :markdown=\"currentMarkdown\" :enableHtml=\"enableHtml\"></ResumeEditor>\n  </div>\n</template>\n\n<script>\n  import StyleEditor from './components/StyleEditor'\n  import ResumeEditor from './components/ResumeEditor'\n  import './assets/reset.css'\n\nexport default {\n  name: 'app',\n  components: {\n    StyleEditor,\n    ResumeEditor\n  },\n  data() {\n    return {\n      interval: 20,\n      currentStyle: '',\n      enableHtml: false,\n      fullStyle: [\n        `/*\n * Hello:I am Arch.run\n * I am good at tracing New Technology\n * Built On: vue2.6+/webpack4+/babel7+\n */\n\n/*\n *  首先给所有元素加上过渡效果\n */\n* {\n  transition: all 1s;\n}\n\n/*\n *  白色背景太单调了,我们来点背景\n */\nhtml {\n  color: rgb(222,222,222);\n  background: rgb(0,43,54);\n  overflow: hidden;\n}\n\nbody{\n  background: rgb(0,43,54);\n}\n\n/*\n * ok,美化一下我们的工作区\n * 加上框框，到正中间，看着舒服\n */\n.styleEditor {\n  padding: .5em;\n  border: 1px solid;\n  overflow: auto;\n  margin: 2.5vh 5vw;\n  height: 90vh;\n  width: 90vw;\n  box-shadow: -4px 4px 2px 0 rgba(0,0,0,0.3);\n  }\n/*\n *代码高亮才不容易出错\n*/\n.token.selector{\n  color: rgb(133,153,0);\n}\n.token.property{\n  color: rgb(187,137,0);\n}\n.token.punctuation{\n  color: yellow;\n}\n.token.function{\n  color: rgb(42,161,152);\n}\n/*\n *给编辑区来点鼠标悬浮效果，或许看着牛逼一点\n */\n.styleEditor:hover {\n  box-shadow: 0px 0px 40px 5px rgba(255,255,255,0.4);\n}\n\n/*\n * 干脆也给注释，选择器，属性，标点函数名字啥的也点风格\n */\n.token.comment { color: #857F6B; font-size: 12px; font-style: italic; }\n.token.selector { color: #E69F0F }\n.token.property { color: #64D5EA; }\n.token.punctuation { color: #ddd; }\n.token.function { color: #BE84F2; }\n\n\n/*\n * 加一些3D转换效果\n */\n.styleEditor {\n  position: fixed; left: 10px; top: 10px;\n  transform: rotateY(10deg) translateZ(-100px);\n}\n\n/*\n*emm，快要写正文了，缩小一下代码区，放到正中间上方，方便下面放内容\n*/\n.styleEditor {\n  height: 25vh;\n}\n\n/*\n*加点透视效果\n*/\nhtml {\n  perspective: 1000px;\n}\n\n/*\n * 这个斜斜的3D效果有点难看，还是再改一下\n * 重新设置code编辑区,再搞到3D效果\n */\n.styleEditor {\n  z-index: 10000;\n  position: fixed; left: 0; top: 0;\n  transform: rotateX(-30deg) translateZ(0px) ;\n}\n\n/*\n * 接下来,为正文编辑做点准备\n * 设置设置一下正文区位置\n * 还要允许滚动，不然内容太长就看不见了\n */\n .resumeEditor{\n  position: fixed;\n  top: 25vh; left: 0; right: 0;\n  padding: .5em;\n  margin: 20px;\n  height: 72vh;\n  border: 1px solid;\n  background: #FCFFDB; color: #222;\n  overflow: auto;\n  border-radius: 8px;\n}\n\n/*\n * 好，开始撸一下正文内容\n */\n\n`,\n        `\n/*\n * 这是 Markdown 格式的，需要变成更友好的格式\n * 我们阔以用开源工具翻译到HTML\n */\n`,\n        `\n/*\n * 显示Markdown格式更好看\n * 不过，格式还需要优化\n */\n.resumeEditor{\n  padding: 20px 4vw;\n}\n\n/* 标题太大了 */\n.resumeEditor h1{\n  font-size:24px;\n  }\n\n/* 副标题也太大了 */\n.resumeEditor h2{\n  display: inline-block;\n    margin: 20px 0 10px;\n  font-size: 20px;\n  color: #007419;\n  }\n\n/*\n*文本需要精致的排版\n*/\n\n.resumeEditor li{ font-size: 15px;}\n.resumeEditor li strong{ color:#003174;}\n.resumeEditor ul,.resumeEditor ol{ list-style: none; }\n.resumeEditor ul> li::before{ content: '•'; margin-right: .5em; }\n.resumeEditor ol { counter-reset: section; }\n.resumeEditor ol li::before {\n  counter-increment: section;\n  content: counters(section, \".\") \" \";\n  margin-right: .5em;\n}\n.resumeEditor blockquote {\n  margin: 1em;\n  padding: .5em;\n  background: #ddd;\n}\n\n.resumeEditor p{\n  font-size: 15px;\n  margin-bottom: 0.5em;\n}\n\n.resumeEditor p strong{\n  color:#003174;\n}\n\n/*\n*图片也需要圆角和阴影\n*/\n.resumeEditor img {\n  width: 100%;\n  border-radius: 5px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\n  margin-top: 10px;\n}\n\nhr {\n  margin:20px 0;\n}\n\n/* 好了,Lets's review it ！*/\n\n* {\n  transition: all 1s;\n}\n.styleEditor {\n  opacity:0;\n}\n.resumeEditor {\n  top:0;\n  height:95vh;\n  z-index:10;\n}\n.background{\n  position:fixed;\n  left:0;\n  top:0;\n  height:100vh; width:100vh;\n  background: rgb(0,43,54);\n  z-index:-10;\n}\n\nh3{\n  margin-bottom: 10px;\n}\n\n`],\n        currentMarkdown: '',\n        fullMarkdown: `\n## Arch.run\n----\n\n- Mobile：136 - hello - world;\n- Wrchat：;\n- Site: arch.run;\n\n\n## 基本信息\n\n- Name https://arch.run;\n- Education Had been to School;\n- Location SH;\n- Work IT;\n\n## 技能\n----\n\n\n* LINUX | GIT | NGINX | APACHE\n* ELASTICSEARCH | REDIS | KAFKA | DOCKER\n* COMPOSER | NPM | WEBPACK | GULP\n* PHP | MYSQL | LARAVEL | SYMFONY\n* UNI-APP | VUE | MP-WEIXIN | NODEJS\n\n## 牛逼经历\n----\n\n* [GitHub](https://github.com/crazybber)\n* [Golang](https://github.com/crazybber/go-fucking-exercise)\n\n## 链接\n----\n\n* [Open Source](http://github.com/gb28181)\n* [GitHub](https://github.com/crazybber)\n* [Community](https://github.com/micro-in-cn)\n  `\n    };\n  },\n  created() {\n    this.makeResume();\n  },\n\n  methods: {\n    makeResume: async function() {\n      await this.progressivelyShowStyle(0);\n      this.interval = 0;\n      await this.progressivelyShowResume();\n      this.interval = 10;\n      await this.progressivelyShowStyle(1);\n      await this.showHtml();\n      await this.progressivelyShowStyle(2);\n    },\n    showHtml: function() {\n      return new Promise((resolve, reject) => {\n        this.enableHtml = true;\n        resolve();\n      });\n    },\n    progressivelyShowStyle(n) {\n      return new Promise((resolve, reject) => {\n        let interval = this.interval;\n        let showStyle = async function() {\n          let style = this.fullStyle[n];\n          if (!style) {\n            return;\n          }\n          // 计算前 n 个 style 的字符总数\n          let length = this.fullStyle\n            .filter((_, index) => index <= n)\n            .map(item => item.length)\n            .reduce((p, c) => p + c, 0);\n          let prefixLength = length - style.length;\n          if (this.currentStyle.length < length) {\n            let l = this.currentStyle.length - prefixLength;\n            let char = style.substring(l, l + 1) || \" \";\n            this.currentStyle += char;\n            if (style.substring(l - 1, l) === \"\\n\" && this.$refs.styleEditor) {\n              this.$nextTick(() => {\n                this.$refs.styleEditor.goBottom();\n              });\n            }\n            setTimeout(showStyle, interval);\n          } else {\n            resolve();\n          }\n        }.bind(this);\n        showStyle();\n      });\n    },\n    progressivelyShowResume() {\n      return new Promise((resolve, reject) => {\n        let length = this.fullMarkdown.length;\n        let interval = this.interval;\n        let showResume = () => {\n          if (this.currentMarkdown.length < length) {\n            this.currentMarkdown = this.fullMarkdown.substring(\n              0,\n              this.currentMarkdown.length + 1\n            );\n            let lastChar = this.currentMarkdown[\n              this.currentMarkdown.length - 1\n            ];\n            let prevChar = this.currentMarkdown[\n              this.currentMarkdown.length - 2\n            ];\n            if (prevChar === \"\\n\" && this.$refs.resumeEditor) {\n              this.$nextTick(() => this.$refs.resumeEditor.goBottom());\n            }\n            setTimeout(showResume, interval);\n          } else {\n            resolve();\n          }\n        };\n        showResume();\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nhtml {\n  min-height: 100%;\n}\n* {\n  box-sizing: border-box;\n}\n</style>\n","<template>\r\n  <div class=\"styleEditor\" ref=\"container\">\r\n    <div class=\"code\" v-html=\"codeInStyleTag\"></div>\r\n    <pre class=\"\" v-html=\"highlightedCode\"></pre>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Prism from 'prismjs';\r\n  export default {\r\n    name: 'Editor',\r\n    props: ['code'],\r\n    computed: {\r\n      highlightedCode: function () {\r\n        return Prism.highlight(this.code, Prism.languages.css)\r\n      },\r\n      codeInStyleTag: function () {\r\n        return `<style>${this.code}</style>`\r\n      }\r\n    },\r\n    methods: {\r\n      goBottom() {\r\n        this.$refs.container.scrollTop = 100000\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n  pre{\r\n  }\r\n  @media (max-width:700px){\r\n    pre{\r\n    }\r\n  }\r\n  .code {\r\n    display: none;\r\n  }\r\n</style>\r\n","<template>\r\n  <div class=\"resumeEditor\" :class=\"{htmlMode:enableHtml}\" ref=\"container\">\r\n    <div v-if=\"enableHtml\" v-html=\"result\"></div>\r\n    <pre v-else>{{result}}</pre>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import marked from 'marked';\r\n  export default {\r\n    props: ['markdown', 'enableHtml'],\r\n    name: 'ResumeEditor',\r\n    computed: {\r\n      result: function () {\r\n        return this.enableHtml ? marked(this.markdown) : this.markdown\r\n      }\r\n    },\r\n    methods: {\r\n      goBottom: function () {\r\n        this.$refs.container.scrollTop = 100000\r\n      },\r\n      goTop: function(){\r\n        this.$refs.container.scrollTop = 0\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n  @media (max-width:700px){\r\n    .resumeEditor{\r\n    }\r\n  }\r\n  .htmlMode {\r\n    animation: flip 2s;\r\n  }\r\n\r\n  @keyframes flip {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n</style>\r\n","*{margin: 0; padding: 0;}\r\n*{box-sizing: border-box;}\r\n*::before{box-sizing: border-box;}\r\n*::after{box-sizing: border-box;}"],"sourceRoot":""}