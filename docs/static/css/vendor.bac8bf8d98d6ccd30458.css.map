{"version":3,"sources":["webpack:///src/App.vue","webpack:///src/Mobile.vue","webpack:///src/components/StyleEditor.vue","webpack:///src/components/ResumeEditor.vue","webpack:///reset.css"],"names":[],"mappings":";AAoQA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA;AACA;EACA;AACA;;;ACRA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA;AACA;EACA;AACA;;;ACpPA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;;ACPA;AACA;AACA;AACA;AACA;EACA;AACA;AAEA;AACA;IACA;AACA;AACA;IACA;AACA;AACA;AC9CA,EAAE,SAAS,EAAE,UAAU,CAAC;AACxB,EAAE,sBAAsB,CAAC;AACzB,UAAU,sBAAsB,CAAC;AACjC,SAAS,sBAAsB,CAAC","file":"static/css/vendor.bac8bf8d98d6ccd30458.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <StyleEditor ref=\"styleEditor\" :code=\"currentStyle\"></StyleEditor>\n    <ResumeEditor ref=\"resumeEditor\" :markdown=\"currentMarkdown\" :enableHtml=\"enableHtml\"></ResumeEditor>\n  </div>\n</template>\n\n<script>\n  import StyleEditor from './components/StyleEditor'\n  import ResumeEditor from './components/ResumeEditor'\n  import './assets/reset.css'\n\n  export default {\n    name: 'app',\n    components: {\n      StyleEditor,\n      ResumeEditor\n    },\n    data() {\n      return {\n        interval: 40,\n        currentStyle: '',\n        enableHtml: false,\n        fullStyle: [\n          `/**\n* Everybody yo yo ,come let's go !\n* 大家好，我是arch.run\n* this a demo just showing something.\n* let's go.\n*/\n\n/**\n *  首先给所有元素加上过渡效果\n */\n* {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n\n/**\n * 白色背景太刺眼,我们来点背景\n */\nhtml {\n color: rgb(222,222,222);\n  height:100%; width:100%;\n  /* Emmm.. It doesn't seem to fit me */\n  background: rgb(0,43,54);\n}\n\n/**\n * ok,美化一下我们的工作区\n */\n.style-div {\n  padding: 10px 10px 20px;\n  overflow: auto;\n  background: rgb(48, 48, 48);\n  color: white;\n  border: 1px solid #ccc;\n  width: 45%;\n  height: 90%;\n  font-size: 14px;\n  box-shadow: -4px 4px 2px 0 rgba(0,0,0,0.3);\n}\n.style-div:hover {\n  box-shadow: 0px 0px 40px 5px rgba(255,255,255,0.4);\n}\n\n/**\n * 代码看着不舒服,加个高亮\n */\n.token.comment { color: #857F6B; font-size: 12px; font-style: italic; }\n.token.selector { color: #E69F0F }\n.token.property { color: #64D5EA; }\n.token.punctuation { color: #ddd; }\n.token.function { color: #BE84F2; }\n\n/**\n * 加一些3D转换效果\n */\n.style-div {\n  position: fixed; left: 10px; top: 10px;\n  transform: rotateY(10deg) translateZ(-100px);\n  -webkit-transform: rotateY(10deg) translateZ(-100px);\n}\n\n/**\n * 改变一下可视角度\n */\nhtml {\n  perspective: 1500px;\n  -webkit-perspective: 1500px;\n}\n\n/**\n * Okey,我还需要一个填充内容的容器\n */\n.resume-div {\n  position: fixed; right: 10px; top: 10px;\n  padding: 10px; margin: 10px;\n  width: 48%; height: 90%;\n  border: 1px solid;\n  background: rgb(48, 48, 48); color: white;\n  overflow: auto;\n  transform: rotateY(-10deg) translateZ(-100px);\n  -webkit-transform: rotateY(-10deg) translateZ(-100px);\n}\n\n/**\n * 好，开始写内容\n */\n\n\n`,\n`\n/**\n * 把 Markdown 格式转换成 HTML\n */\n`\n,\n`\n/**\n * 我现在感觉Markdown格式更好看\n * 对 HTML 加点样式\n */\n.resume-div a {\n      color: wheat;\n  }\n.resume-div h2 {\n  display: inline-block;\n  border-bottom: 1px solid;\n  margin: 20px 0 10px;\n}\n.resume-div ul,.resume-div ol {\n  list-style: none;\n}\n.resume-div ul> li::before {\n  content: '•';\n  margin-right: 10px;\n}\n.resume-div ul> li {\n   margin: 8px;\n}\n\n/**\n * OK,LAST WORDS\n * I JUST USE OTHER'S STYLES\n */\n`],\n        currentMarkdown: '',\n        fullMarkdown: `\n## Arch.run\n----\n\n技术爱好者、开源爱好者、技术极客、技术布道师\n- Email：;\n- open source ：;\n\n## 基本信息\n----\n\n- name;\n- education\n- location;\n- hobby\n\n## 技能\n----\n\n* LINUX|WINDOWS | GIT | NGINX | KUBERNETES\n* ELASTICSEARCH | REDIS | KAFKA | DOCKER\n* COMPOSER | NPM | WEBPACK | GULP\n* PHP | MYSQL | LARAVEL | SYMFONY\n* UNI-APP | VUE | MP-WEIXIN | NODEJS\n\n## 工作经历\n----\n\n- A Company\n- B Company\n- C Company\n\n## 链接\n----\n\n* [Open Source](http://github.com/gb28181)\n* [GitHub](https://github.com/crazybber)\n* [Community](https://github.com/micro-in-cn)\n`\n      }\n    },\n    created() {\n      this.makeResume()\n    },\n\n    methods: {\n      makeResume: async function () {\n        await this.progressivelyShowStyle(0)\n        await this.progressivelyShowResume()\n        await this.progressivelyShowStyle(1)\n        await this.showHtml()\n        await this.progressivelyShowStyle(2)\n      },\n      showHtml: function () {\n        return new Promise((resolve, reject) => {\n          this.enableHtml = true\n          resolve()\n        })\n      },\n      progressivelyShowStyle(n) {\n        return new Promise((resolve, reject) => {\n          let interval = this.interval\n          let showStyle = (async function () {\n            let style = this.fullStyle[n]\n            if (!style) { return }\n            // 计算前 n 个 style 的字符总数\n            let length = this.fullStyle.filter((_, index) => index <= n).map((item) => item.length).reduce((p, c) => p + c, 0)\n            let prefixLength = length - style.length\n            if (this.currentStyle.length < length) {\n              let l = this.currentStyle.length - prefixLength\n              let char = style.substring(l, l + 1) || ' '\n              this.currentStyle += char\n              if (style.substring(l - 1, l) === '\\n' && this.$refs.styleEditor) {\n                this.$nextTick(() => {\n                  this.$refs.styleEditor.goBottom()\n                })\n              }\n              setTimeout(showStyle, interval)\n            } else {\n              resolve()\n            }\n          }).bind(this)\n          showStyle()\n        })\n      },\n      progressivelyShowResume() {\n        return new Promise((resolve, reject) => {\n          let length = this.fullMarkdown.length\n          let interval = this.interval\n          let showResume = () => {\n            if (this.currentMarkdown.length < length) {\n              this.currentMarkdown = this.fullMarkdown.substring(0, this.currentMarkdown.length + 1)\n              let lastChar = this.currentMarkdown[this.currentMarkdown.length - 1]\n              let prevChar = this.currentMarkdown[this.currentMarkdown.length - 2]\n              if (prevChar === '\\n' && this.$refs.resumeEditor) {\n                this.$nextTick(() => this.$refs.resumeEditor.goBottom())\n              }\n              setTimeout(showResume, interval)\n            } else {\n              resolve()\n            }\n          }\n          showResume()\n        })\n      }\n    }\n  }\n\n</script>\n\n<style scoped>\n  #app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html {\n    min-height: 100%;\n  }\n  *{\n    box-sizing: border-box;\n  }\n\n</style>\n","<template>\n  <div id=\"app\">\n    <StyleEditor ref=\"styleEditor\" :code=\"currentStyle\"></StyleEditor>\n    <ResumeEditor ref=\"resumeEditor\" :markdown=\"currentMarkdown\" :enableHtml=\"enableHtml\"></ResumeEditor>\n  </div>\n</template>\n\n<script>\n  import StyleEditor from './components/StyleEditor'\n  import ResumeEditor from './components/ResumeEditor'\n  import './assets/reset.css'\n\n  export default {\n    name: 'app',\n    components: {\n      StyleEditor,\n      ResumeEditor\n    },\n    data() {\n    return {\n      interval: 20,\n      currentStyle: '',\n      enableHtml: false,\n      fullStyle: [\n      `/**\n * Everybody yo yo ,come let's go !\n * Hello ,I am Arch.run\n * I love new techs\n * i want to say something\n */\n\n/**\n *  首先给所有元素加上过渡效果\n */\n* {\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\n\n/**\n * 白色背景太刺眼,换一个原谅绿\n */\nhtml {\n  background: rgba(101, 234, 45, 0.59);\n  height:100%; width:100%;\n          /* Emmm.. It doesn't seem to fit me */\n  background: rgb(63, 82, 99);\n}\n\n/**\n * ok,美化一下我们的工作区\n */\n.style-div {\n  padding: 10px 10px 20px;\n  overflow: auto;\n  background: rgb(48, 48, 48);\n  color: white;\n  border: 1px solid #ccc;\n  width: 95%;\n  height: 90%;\n  font-size: 14px;\n  box-shadow: -4px 4px 2px 0 rgba(0,0,0,0.3);\n}\n.style-div:hover {\n  box-shadow: 0px 0px 40px 5px rgba(255,255,255,0.4);\n}\n\n/**\n * 代码看着不舒服,加个高亮\n */\n.token.comment { color: #857F6B; font-size: 12px; font-style: italic; }\n.token.selector { color: #E69F0F }\n.token.property { color: #64D5EA; }\n.token.punctuation { color: #ddd; }\n.token.function { color: #BE84F2; }\n\n/**\n * 加一些3D转换效果\n */\n.style-div {\n  position: fixed; left: 10px; top: 10px;\n  transform: rotateY(10deg) translateZ(-100px);\n  -webkit-transform: rotateY(10deg) translateZ(-100px);\n}\n\n/**\n * 改变一下可视角度\n */\nhtml {\n  perspective: 1500px;\n  -webkit-perspective: 1500px;\n}\n\n/**\n * Okey,我还需要一个填充内容的容器\n */\n.resume-div {\n  position: fixed; right: 10px; top: 10px; z-index: 9999;\n  padding: 10px; margin: 10px;\n  width: 90%;\n  height: 70%;\n  border: 1px solid;\n  background: rgb(48, 48, 48); color: white;\n  overflow: auto;\n  transform: rotateY(-10deg) translateZ(-100px);\n  -webkit-transform: rotateY(-10deg) translateZ(-100px);\n}\n\n/**\n * 好，开始写内容\n */\n\n\n`,\n`\n/**\n * 把 Markdown 格式转换成 HTML\n */\n`\n,\n`\n/**\n * 我现在竟然感觉Markdown格式更好看\n * 再对 HTML 加点样式\n */\n.resume-div a {\n      color: wheat;\n  }\n.resume-div h2 {\n    display: inline-block;\n    border-bottom: 1px solid;\n    margin: 20px 0 10px;\n  }\n.resume-div ul,.resume-div ol {\n    list-style: none;\n  }\n.resume-div ul> li::before {\n    content: '•';\n    margin-right: 10px;\n  }\n.resume-div ul> li {\n    margin: 8px;\n  }\n\n/**\n * OK,还有最后一句话\n * PHP是世界上最好的语言\n */\n`],\n  currentMarkdown: '',\n  fullMarkdown: `\n## Arch.run\n----\n\n- Mobile：136 - hello - world;\n- Wrchat：;\n- Site: arch.run;\n\n## 基本信息\n----\n\n- Name;\n- Education;\n- Location;\n- Work\n\n## 技能\n----\n\n* LINUX | GIT | NGINX | APACHE\n* ELASTICSEARCH | REDIS | KAFKA | DOCKER\n* COMPOSER | NPM | WEBPACK | GULP\n* PHP | MYSQL | LARAVEL | SYMFONY\n* UNI-APP | VUE | MP-WEIXIN | NODEJS\n\n## 工作经历\n----\n\n- Company A\n- Company B\n- Company C\n\n## 链接\n----\n\n* [Open Source](http://github.com/gb28181)\n* [GitHub](https://github.com/crazybber)\n* [Community](https://github.com/micro-in-cn)\n  `\n  }\n  },\n  created() {\n    this.makeResume()\n  },\n\n  methods: {\n    makeResume: async function () {\n      await this.progressivelyShowStyle(0)\n        this.interval = 0\n      await this.progressivelyShowResume()\n        this.interval = 10\n      await this.progressivelyShowStyle(1)\n      await this.showHtml()\n      await this.progressivelyShowStyle(2)\n    },\n    showHtml: function () {\n      return new Promise((resolve, reject) => {\n        this.enableHtml = true\n      resolve()\n    })\n  },\n  progressivelyShowStyle(n) {\n    return new Promise((resolve, reject) => {\n              let interval = this.interval\n              let showStyle = (async function () {\n      let style = this.fullStyle[n]\n      if (!style) { return }\n      // 计算前 n 个 style 的字符总数\n      let length = this.fullStyle.filter((_, index) => index <= n).map((item) => item.length).reduce((p, c) => p + c, 0)\n      let prefixLength = length - style.length\n      if (this.currentStyle.length < length) {\n        let l = this.currentStyle.length - prefixLength\n        let char = style.substring(l, l + 1) || ' '\n        this.currentStyle += char\n        if (style.substring(l - 1, l) === '\\n' && this.$refs.styleEditor) {\n          this.$nextTick(() => {\n            this.$refs.styleEditor.goBottom()\n        })\n      }\n      setTimeout(showStyle, interval)\n    } else {\n      resolve()\n    }\n  }).bind(this)\n  showStyle()\n  })\n  },\n  progressivelyShowResume() {\n    return new Promise((resolve, reject) => {\n              let length = this.fullMarkdown.length\n              let interval = this.interval\n              let showResume = () => {\n              if (this.currentMarkdown.length < length) {\n      this.currentMarkdown = this.fullMarkdown.substring(0, this.currentMarkdown.length + 1)\n      let lastChar = this.currentMarkdown[this.currentMarkdown.length - 1]\n      let prevChar = this.currentMarkdown[this.currentMarkdown.length - 2]\n      if (prevChar === '\\n' && this.$refs.resumeEditor) {\n        this.$nextTick(() => this.$refs.resumeEditor.goBottom())\n      }\n      setTimeout(showResume, interval)\n    } else {\n      resolve()\n    }\n  }\n  showResume()\n  })\n  }\n  }\n  }\n\n</script>\n\n<style scoped>\n  #app {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html {\n    min-height: 100%;\n  }\n  *{\n    box-sizing: border-box;\n  }\n\n</style>\n","<template>\r\n  <div class=\"style-div\" ref=\"container\">\r\n    <div class=\"code\" v-html=\"codeInStyleTag\"></div>\r\n    <pre class=\"\" v-html=\"highlightedCode\"></pre>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Prism from 'prismjs'\r\n  export default {\r\n    name: 'Editor',\r\n    props: ['code'],\r\n    computed: {\r\n      highlightedCode: function () {\r\n        return Prism.highlight(this.code, Prism.languages.css)\r\n      },\r\n      codeInStyleTag: function () {\r\n        return `<style>${this.code}</style>`\r\n      }\r\n    },\r\n    methods: {\r\n      goBottom() {\r\n        this.$refs.container.scrollTop = 100000\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n  pre{\r\n  }\r\n  @media (max-width:500px){\r\n    pre{\r\n    }\r\n  }\r\n  .code {\r\n    display: none;\r\n  }\r\n</style>\r\n","<template>\r\n  <div class=\"resume-div\" :class=\"{htmlMode:enableHtml}\" ref=\"container\">\r\n    <div v-if=\"enableHtml\" v-html=\"result\"></div>\r\n    <pre v-else>{{result}}</pre>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import marked from 'marked'\r\n  export default {\r\n    props: ['markdown', 'enableHtml'],\r\n    name: 'ResumeEditor',\r\n    computed: {\r\n      result: function () {\r\n        return this.enableHtml ? marked(this.markdown) : this.markdown\r\n      }\r\n    },\r\n    methods: {\r\n      goBottom: function () {\r\n        this.$refs.container.scrollTop = 100000\r\n      },\r\n      goTop: function(){\r\n        this.$refs.container.scrollTop = 0\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n  @media (max-width:500px){\r\n    .resumeEditor{\r\n    }\r\n  }\r\n  .htmlMode {\r\n    animation: flip 2s;\r\n  }\r\n\r\n  @keyframes flip {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n</style>\r\n","*{margin: 0; padding: 0;}\r\n*{box-sizing: border-box;}\r\n*::before{box-sizing: border-box;}\r\n*::after{box-sizing: border-box;}"],"sourceRoot":""}